{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nvar _jsxFileName = \"/home/redex/environments/instagram/frontend/App.js\",\n    _this2 = this;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { StatusBar } from 'expo-status-bar';\nimport React, { Component } from 'react';\nimport { LogBox } from \"react-native-web/dist/index\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from \"./redux/reducers\";\nimport thunk from 'redux-thunk';\nimport LandingScreen from \"./components/auth/Landing\";\nimport RegisterScreen from \"./components/auth/Register\";\nimport MainScreen from \"./components/Main\";\nimport AddScreen from \"./components/main/Add\";\nimport LoginScreen from \"./components/auth/Login\";\nimport SaveScreen from \"./components/main/Save\";\nimport CommentsScreen from \"./components/main/Comments\";\nimport { AppLogo, AppLogoContainer, AppName } from \"./Styles\";\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nvar store = createStore(rootReducer, applyMiddleware(thunk));\naxios.default.baseURL = 'http://0.0.0.0:8000';\nvar Stack = createStackNavigator();\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      loaded: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var loggedIn = this.props.loggedIn;\n\n      if (false) {\n        return React.createElement(AppLogoContainer, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 9\n          }\n        }, React.createElement(AppLogo, {\n          name: \"instagram\",\n          size: 70,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 11\n          }\n        }));\n      }\n\n      if (!loggedIn) {\n        return React.createElement(NavigationContainer, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 9\n          }\n        }, React.createElement(Stack.Navigator, {\n          initialRouteName: \"Landing\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 11\n          }\n        }, React.createElement(Stack.Screen, {\n          name: \"Landing\",\n          component: LandingScreen,\n          options: {\n            headerShown: false\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }\n        }), React.createElement(Stack.Screen, {\n          name: \"Register\",\n          component: RegisterScreen,\n          options: {\n            headerShown: false\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }\n        }), React.createElement(Stack.Screen, {\n          name: \"Login\",\n          component: LoginScreen,\n          options: {\n            headerShown: false\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }\n        })));\n      }\n\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }\n      }, \"Logged in\"));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    loggedIn: state.userState.loggedIn\n  };\n};\n\nApp = connect(mapStateToProps)(App);\n\nvar AppWithStore = function AppWithStore() {\n  return React.createElement(Provider, {\n    store: store,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, React.createElement(App, {\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default AppWithStore;","map":{"version":3,"sources":["/home/redex/environments/instagram/frontend/App.js"],"names":["StatusBar","React","Component","LogBox","NavigationContainer","createStackNavigator","Provider","createStore","applyMiddleware","rootReducer","thunk","LandingScreen","RegisterScreen","MainScreen","AddScreen","LoginScreen","SaveScreen","CommentsScreen","AppLogo","AppLogoContainer","AppName","connect","axios","store","default","baseURL","Stack","App","props","state","loaded","loggedIn","headerShown","mapStateToProps","userState","AppWithStore"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, { Component } from 'react';\nimport { LogBox, StyleSheet, Text, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native'\nimport { createStackNavigator } from '@react-navigation/stack'\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './redux/reducers';\nimport thunk from 'redux-thunk';\nimport LandingScreen from './components/auth/Landing';\nimport RegisterScreen from './components/auth/Register';\nimport MainScreen from './components/Main';\nimport AddScreen from './components/main/Add';\nimport LoginScreen from './components/auth/Login';\nimport SaveScreen from './components/main/Save';\nimport CommentsScreen from './components/main/Comments';\nimport { AppLogo, AppLogoContainer, AppName } from './Styles';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\n\n\nconst store = createStore(rootReducer, applyMiddleware(thunk))\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\naxios.default.baseURL = 'http://0.0.0.0:8000'\nconst Stack = createStackNavigator();\n// LogBox.ignoreLogs([\"Setting a timer\"])\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      loaded: true,\n    }\n  }\n  render(){\n    const { loggedIn } = this.props;\n    if (false){\n      return(\n        <AppLogoContainer>\n          <AppLogo name=\"instagram\" size={70}/>\n        </AppLogoContainer>\n      )\n    }\n    if (!loggedIn){\n      return (\n        <NavigationContainer>\n          <Stack.Navigator initialRouteName=\"Landing\">\n            <Stack.Screen name=\"Landing\" component={LandingScreen} options={{ headerShown: false }}/> \n            <Stack.Screen name=\"Register\" component={RegisterScreen} options={{ headerShown: false }}/>\n            <Stack.Screen name=\"Login\" component={LoginScreen} options={{ headerShown: false }}/>\n          </Stack.Navigator>\n        </NavigationContainer>\n      );\n    }\n\n    return(\n      <View><Text>Logged in</Text></View>\n      // <Provider store={store}>\n      //   <NavigationContainer>\n      //     <Stack.Navigator initialRouteName=\"Main\">\n      //       <Stack.Screen name=\"Main\" component={MainScreen} options={{ headerShown: false }}/>\n      //       <Stack.Screen name=\"Add\" component={AddScreen}/>\n      //       <Stack.Screen name=\"Save\" component={SaveScreen}/>\n      //       <Stack.Screen name=\"Comments\" component={CommentsScreen}/>\n      //     </Stack.Navigator>\n      //   </NavigationContainer>\n      // </Provider>\n      )\n  }\n}\nconst mapStateToProps = (state) => ({\n  loggedIn: state.userState.loggedIn\n})\nApp = connect(mapStateToProps)(App)\nconst AppWithStore = () => {\n  return(\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  )\n}\n\nexport default AppWithStore"]},"metadata":{},"sourceType":"module"}